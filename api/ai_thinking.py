import logging
import time
import json
import random
from flask import request, jsonify
from api import api_bp

logger = logging.getLogger(__name__)

# Хранилище мыслей ИИ для демонстрации
ai_thought_patterns = {
    "python": [
        "Анализирую синтаксис Python...",
        "Проверяю корректность отступов в коде...",
        "Изучаю функциональность модуля...",
        "Оцениваю эффективность алгоритма...",
        "Рассматриваю возможные альтернативные решения...",
        "Проверяю обработку краевых случаев...",
        "Анализирую возможные ошибки времени выполнения...",
        "Сопоставляю с паттернами проектирования Python...",
        "Оптимизирую структуру кода...",
        "Сравниваю с библиотечными функциями Python..."
    ],
    "javascript": [
        "Анализирую синтаксис JavaScript...",
        "Проверяю корректность областей видимости...",
        "Изучаю асинхронные паттерны...",
        "Оцениваю эффективность функции...",
        "Рассматриваю совместимость с разными браузерами...",
        "Проверяю обработку ошибок и исключений...",
        "Анализирую возможные проблемы с типами данных...",
        "Сопоставляю с современными JS паттернами...",
        "Оптимизирую производительность кода...",
        "Сравниваю с существующими библиотеками..."
    ],
    "general": [
        "Анализирую требования задачи...",
        "Изучаю контекст проблемы...",
        "Оцениваю возможные подходы к решению...",
        "Рассматриваю оптимальную структуру данных...",
        "Проверяю возможные ограничения и требования...",
        "Сопоставляю с известными алгоритмами...",
        "Оцениваю сложность решения...",
        "Ищу возможности для оптимизации...",
        "Проверяю корректность решения на тестовых примерах...",
        "Формулирую окончательный ответ..."
    ]
}

# Комментарии к мыслям
ai_thought_comments = {
    "python": [
        "Структура кода хорошо организована, но можно улучшить именование переменных",
        "В коде отсутствует документация, рекомендую добавить docstrings",
        "Использование list comprehension здесь очень уместно и элегантно",
        "Функция может работать медленно на больших входных данных, стоит рассмотреть кэширование",
        "Хорошая обработка исключений, но можно добавить более специфичные типы ошибок",
        "Код следует стандарту PEP 8, что делает его легко читаемым",
        "Можно упростить логику, используя встроенные функции Python",
        "Рекурсивное решение элегантно, но может привести к переполнению стека",
        "Алгоритм имеет временную сложность O(n²), можно оптимизировать до O(n log n)"
    ],
    "javascript": [
        "Хорошее использование стрелочных функций и современного синтаксиса",
        "Код можно улучшить, используя асинхронные функции",
        "Обратите внимание на возможные проблемы с областью видимости переменных",
        "Хорошее управление памятью, но стоит обратить внимание на потенциальные утечки",
        "Можно улучшить производительность, избегая многократных обращений к DOM",
        "Хорошее следование принципам функционального программирования",
        "Стоит добавить проверки типов для обеспечения надежности кода",
        "Обработка ошибок реализована грамотно с использованием try/catch"
    ],
    "general": [
        "Решение использует эффективные структуры данных",
        "Подход к решению задачи очень творческий и нестандартный",
        "Код хорошо структурирован и легко читается",
        "Обработка краевых случаев реализована тщательно",
        "Можно добавить дополнительные проверки для повышения надежности",
        "Решение является масштабируемым и будет работать с разными типами входных данных",
        "Алгоритм оптимизирован для данной конкретной задачи",
        "Документация и комментарии достаточно подробные"
    ]
}

@api_bp.route('/ai-thinking', methods=['POST'])
def ai_thinking():
    """
    Имитирует процесс "размышления" ИИ, возвращая промежуточные мысли и комментарии
    
    Ожидаемый JSON запрос:
    {
        "prompt": "Напиши код функции, которая находит наибольший общий делитель двух чисел",
        "language": "python",
        "max_thoughts": 5   // необязательно, по умолчанию 3
    }
    """
    data = request.get_json()
    
    if not data:
        return jsonify({"error": "Данные не предоставлены"}), 400
    
    prompt = data.get('prompt')
    language = data.get('language', 'general').lower()
    max_thoughts = data.get('max_thoughts', 3)
    
    if not prompt:
        return jsonify({"error": "Запрос не предоставлен"}), 400
    
    # Проверяем, поддерживается ли язык
    if language not in ai_thought_patterns:
        language = 'general'
    
    # Генерируем "размышления" ИИ
    thoughts = []
    for _ in range(min(max_thoughts, len(ai_thought_patterns[language]))):
        thought = random.choice(ai_thought_patterns[language])
        # Убедимся, что мысль не повторяется
        while thought in [t["thought"] for t in thoughts]:
            thought = random.choice(ai_thought_patterns[language])
        
        thoughts.append({
            "thought": thought,
            "timestamp": time.time()
        })
        
    # Генерируем комментарии к размышлениям
    comments = []
    for _ in range(min(2, len(ai_thought_comments[language]))):
        comment = random.choice(ai_thought_comments[language])
        # Убедимся, что комментарий не повторяется
        while comment in comments:
            comment = random.choice(ai_thought_comments[language])
        
        comments.append(comment)
    
    # Генерируем итоговый ответ (для демо просто возвращаем шаблонный ответ по языку)
    answers = {
        "python": """def gcd(a, b):
    # Находит наибольший общий делитель двух чисел
    while b:
        a, b = b, a % b
    return a

# Пример использования
print(gcd(48, 18))  # Выведет: 6""",
        
        "javascript": """function gcd(a, b) {
  // Находит наибольший общий делитель двух чисел
  while (b !== 0) {
    let temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

// Пример использования
console.log(gcd(48, 18));  // Выведет: 6""",
        
        "general": """// Функция для нахождения НОД
function gcd(a, b) {
  while (b != 0) {
    let temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}"""
    }
    
    final_answer = answers.get(language, answers["general"])
    
    # Готовим ответ с имитацией задержки "размышления"
    response = {
        "thoughts": thoughts,
        "comments": comments,
        "answer": final_answer,
        "processing_time": random.uniform(0.5, 2.0),
        "language": language,
        "prompt": prompt
    }
    
    return jsonify(response), 200