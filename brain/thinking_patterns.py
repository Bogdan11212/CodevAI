"""
Шаблоны мышления для различных языков программирования
Эти шаблоны используются как база для реального мышления ИИ
"""

import json
import logging

logger = logging.getLogger(__name__)

# Базовые шаблоны мышления для различных языков программирования
THINKING_PATTERNS = {
    "python": [
        "Анализирую задачу на соответствие парадигмам Python...",
        "Рассматриваю возможные подходы к решению в контексте Python...",
        "Оцениваю возможность использования стандартных библиотек...",
        "Анализирую сложность предложенного алгоритма...",
        "Проверяю соответствие PEP 8 и лучшим практикам Python...",
        "Оцениваю возможные оптимизации для улучшения производительности...",
        "Рассматриваю альтернативные подходы с использованием функциональных возможностей Python...",
        "Анализирую возможные краевые случаи и исключения...",
        "Проверяю обработку ошибок и исключений...",
        "Размышляю о документировании кода согласно стандартам Python..."
    ],
    "javascript": [
        "Анализирую задачу на соответствие современному JavaScript...",
        "Рассматриваю возможность использования функциональных подходов в JS...",
        "Оцениваю применимость асинхронных паттернов...",
        "Анализирую совместимость с различными браузерами и средами выполнения...",
        "Проверяю соответствие современным стандартам ECMAScript...",
        "Оцениваю производительность предложенного подхода...",
        "Рассматриваю возможность использования современных API и библиотек...",
        "Анализирую типобезопасность предложенного решения...",
        "Проверяю работу с памятью и возможные утечки...",
        "Размышляю об оптимальной структуре проекта и организации кода..."
    ],
    "java": [
        "Анализирую задачу с точки зрения объектно-ориентированного подхода Java...",
        "Рассматриваю возможность использования стандартных библиотек и фреймворков...",
        "Оцениваю типовую безопасность и контрактную модель...",
        "Анализирую производительность и потребление памяти...",
        "Проверяю соответствие принципам SOLID и лучшим практикам Java...",
        "Оцениваю возможность применения паттернов проектирования...",
        "Рассматриваю многопоточные аспекты решения...",
        "Анализирую обработку исключений и устойчивость к ошибкам...",
        "Проверяю соответствие стандартам кодирования Java...",
        "Размышляю о масштабируемости и поддерживаемости решения..."
    ],
    "cpp": [
        "Анализирую задачу с учетом особенностей памяти и производительности C++...",
        "Рассматриваю использование шаблонов и метапрограммирования...",
        "Оцениваю эффективность управления ресурсами и памятью...",
        "Анализирую соответствие современному стандарту C++...",
        "Проверяю безопасность типов и потенциальные проблемы с указателями...",
        "Оцениваю возможность использования STL и стандартных библиотек...",
        "Рассматриваю аспекты многопоточности и параллелизма...",
        "Анализирую баланс между читаемостью и производительностью...",
        "Проверяю обработку ошибок и исключительные ситуации...",
        "Размышляю о совместимости с различными компиляторами и платформами..."
    ],
    "general": [
        "Анализирую общую алгоритмическую структуру задачи...",
        "Рассматриваю возможные подходы к решению, независимо от языка...",
        "Оцениваю временную и пространственную сложность...",
        "Анализирую возможные оптимизации алгоритма...",
        "Проверяю логическую целостность предложенного решения...",
        "Оцениваю обработку краевых случаев...",
        "Рассматриваю альтернативные алгоритмические подходы...",
        "Анализирую потенциальные баги и узкие места...",
        "Проверяю понятность и читаемость подхода...",
        "Размышляю о масштабируемости и применимости решения к различным задачам..."
    ]
}

# Комментарии к процессу мышления
THINKING_COMMENTS = {
    "python": [
        "Использование list comprehensions здесь очень элегантно и питонично",
        "Стоит рассмотреть использование генераторов для экономии памяти",
        "Можно применить декораторы для улучшения повторного использования кода",
        "Этот подход соответствует принципу 'Лучше явное, чем неявное' (PEP 20)",
        "Документация в стиле docstrings улучшит понимание функций",
        "Можно использовать f-строки для более читаемого форматирования",
        "Контекстные менеджеры (with) улучшат работу с ресурсами",
        "Использование встроенных функций map/filter/reduce может повысить выразительность",
        "Типовые аннотации повысят безопасность и читаемость кода",
        "Рекомендую разделить этот метод на несколько более мелких функций"
    ],
    "javascript": [
        "Использование стрелочных функций делает код лаконичнее и читаемее",
        "Деструктуризация объектов улучшает работу с данными",
        "Асинхронные функции с async/await обеспечат лучшую обработку промисов",
        "Модульный подход улучшит структуру и поддерживаемость кода",
        "Использование map/filter/reduce сделает код более функциональным",
        "Проверка типов с помощью TypeScript повысит надежность",
        "Замыкания здесь используются очень эффективно",
        "Следует избегать мутаций для предсказуемого поведения кода",
        "Использование современных API и методов улучшит производительность",
        "Обработка ошибок через try/catch или цепочки промисов повысит надежность"
    ],
    "java": [
        "Использование интерфейсов повысит гибкость и расширяемость",
        "Абстракция здесь очень хорошо реализована",
        "Стоит рассмотреть использование паттерна Строитель для сложных объектов",
        "Применение функционального программирования (Stream API) упростит код",
        "Иммутабельность объектов обеспечит безопасность при параллельном выполнении",
        "Правильное использование исключений повысит надежность",
        "Использование дженериков увеличит типобезопасность",
        "Стратегия обработки ресурсов хорошо продумана",
        "Инкапсуляция данных здесь реализована согласно лучшим практикам",
        "Правильное применение наследования и композиции улучшит структуру"
    ],
    "cpp": [
        "Использование умных указателей снизит риск утечек памяти",
        "RAII принцип здесь применен очень эффективно",
        "Шаблоны в этом контексте обеспечивают гибкость и типобезопасность",
        "Семантика перемещения оптимизирует работу с ресурсами",
        "Использование STL алгоритмов делает код более выразительным",
        "Правильная стратегия обработки ошибок повышает надежность",
        "Компиляционные константы улучшают производительность",
        "Эффективное использование стека и кучи оптимизирует память",
        "Использование неявных преобразований может быть опасным",
        "Разделение интерфейса и реализации улучшает модульность"
    ],
    "general": [
        "Алгоритмическая сложность решения оптимальна для данной задачи",
        "Выбор структуры данных хорошо соответствует требованиям",
        "Стоит обратить внимание на обработку граничных случаев",
        "Подход к решению достаточно гибкий для будущих изменений",
        "Решение сохраняет баланс между эффективностью и читаемостью",
        "Возможно дальнейшее улучшение производительности за счет кэширования",
        "Разделение кода на логические блоки повышает понятность",
        "Пошаговый анализ задачи проведен очень тщательно",
        "Общий подход основан на проверенных алгоритмических паттернах",
        "Архитектура решения хорошо масштабируется"
    ]
}

def get_thinking_pattern(language):
    """
    Возвращает шаблон мышления для указанного языка программирования
    
    Args:
        language (str): Язык программирования
        
    Returns:
        list: Список шаблонов мышления
    """
    return THINKING_PATTERNS.get(language, THINKING_PATTERNS["general"])

def get_thinking_comments(language):
    """
    Возвращает комментарии к мышлению для указанного языка программирования
    
    Args:
        language (str): Язык программирования
        
    Returns:
        list: Список комментариев
    """
    return THINKING_COMMENTS.get(language, THINKING_COMMENTS["general"])

def save_thinking_pattern(language, patterns):
    """
    Сохраняет новый шаблон мышления для языка
    
    Args:
        language (str): Язык программирования
        patterns (list): Список шаблонов мышления
    """
    if language not in THINKING_PATTERNS:
        THINKING_PATTERNS[language] = []
    
    THINKING_PATTERNS[language].extend(patterns)
    
    # В реальной системе здесь было бы сохранение в файл или базу данных
    logger.info(f"Добавлены новые шаблоны мышления для языка {language}")

def save_thinking_comment(language, comments):
    """
    Сохраняет новые комментарии к мышлению для языка
    
    Args:
        language (str): Язык программирования
        comments (list): Список комментариев
    """
    if language not in THINKING_COMMENTS:
        THINKING_COMMENTS[language] = []
    
    THINKING_COMMENTS[language].extend(comments)
    
    # В реальной системе здесь было бы сохранение в файл или базу данных
    logger.info(f"Добавлены новые комментарии к мышлению для языка {language}")